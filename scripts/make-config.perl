#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib ( $FindBin::Bin );  # for local modules
use CwcConfig;

use Getopt::Long;
use Path::Class;

# ------------------------------------------------------------
# Constant values

# Base location of cwc-integ stuff.
my $base_dir = dir($FindBin::Bin, "..")->resolve();

# This is the config file we'll write.
my $cwc_source_config_filename = file($base_dir, "cwc-source-config.lisp")->absolute();

# ------------------------------------------------------------
# Global Variables

# Set to enable verbose (debugging) output.
my $verbose = 0;

# ------------------------------------------------------------
# Parse Arguments

GetOptions('v|verbose'          => \$verbose,
          )
  or die("Error parsing arguments.");

# ------------------------------------------------------------
# Perform any one-time setup.

# By default, do everything from the cwc-integ root dir.
chdir($base_dir);
$verbose and
  print("Running in: " . dir(".")->absolute . "\n");

CwcConfig::load_config(1);

# ------------------------------------------------------------
# Actually write the config file.

print("Writing config file: $cwc_source_config_filename\n");
open(my $fh, ">", $cwc_source_config_filename) or
  die("Unable to open file for writing: $cwc_source_config_filename");

# First, write a warning header.
print($fh ";; AUTO-GENERATED FILE\n");
my $script_filename = file(__FILE__)->absolute();
print($fh ";; This file was generated by: $script_filename\n");
print($fh "\n");

# Write the body of the config.
print($fh "(in-package :cl-user)\n");
print($fh "\n");

# Set up the ASDF registry.
print($fh "(require :asdf)\n");
print($fh "\n");
print($fh "(asdf:initialize-source-registry\n");
print($fh " '(:source-registry\n");

foreach my $repo_name (CwcConfig::get_all_repo_names()) {
  my $repo_ref = CwcConfig::get_repo_config_ref($repo_name);
  if (not exists($repo_ref->{asd_search_type})) {
    # Just silently skip it.
  }
  elsif (not exists($repo_ref->{dir})) {
    warn ("Repo ($repo_name) did not have a configured directory, skipping.");
  }
  elsif (not (-d $repo_ref->{dir})) {
    die("Repo ($repo_name) was configured with missing directory: " .
        $repo_ref->{dir});
  }
  else {
    # Looks fine, add an entry to the source registry.
    my $asd_search_type = $repo_ref->{asd_search_type};
    my $repo_dir = $repo_ref->{dir};
    print($fh "    ($asd_search_type \"$repo_dir\")\n");
  }
}

print($fh "   :inherit-configuration))\n");

# Store the paths to trips-bob and trips-cabot.
print($fh "\n");
add_trips_vars("bob");
add_trips_vars("cabot");

exit(0);

# End of main script
# ------------------------------------------------------------
# Subroutines

sub add_trips_vars {
  my $which_trips = shift();
  my $repo_name = "trips-$which_trips";

  my $repo_ref = CwcConfig::get_repo_config_ref($repo_name);
  defined($repo_ref) or
    die("Unable to look up repo information for: $repo_name");

  my $repo_dir = $repo_ref->{dir};
  defined($repo_dir) or
    die("Unable to find directory for repo: $repo_name");

  my $src_dir = "$repo_dir/src";
  if (not (-d $src_dir)) {
    $src_dir = "nil";
  }
  my $bin_dir = "$repo_dir/bin";
  if (not (-d $bin_dir)) {
    $bin_dir = "nil";
  }

  print($fh "(defvar *trips-$which_trips-src-dir* \"$src_dir\")\n");
  print($fh "(defvar *trips-$which_trips-bin-dir* \"$bin_dir\")\n");
}
